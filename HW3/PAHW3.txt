New Homework, Due May 21 at 11:59pm

In this new homework, you cannot use topics not covered in the first 11 lectures. And you cannot use any modules except "textwrap" (unless you ask me about another module and get permission). And you must work on your own and not copy someone else's code.

Here is the new assignment:
In the last homework we saw that the dictionary not only had translations for individual words, it also had phrases. In translating text from one language to another, it is likely that translating a phrase as a whole will yield a better result than individually translating each of the words of that phrase. Similarly, longer phrases should be translated before shorter ones. (This becomes an issue when two phrases overlap. For example, suppose we had four words in some language: A, B, C, and D. And suppose that we had a dictionary to a second language: {"A":"T", "B":"U", "C":"V", "D":"W", "A B":"X", "C D":"Y", "B C D":"Z"}. Then the sentence "A B C D." should translate to: "T Z.")

You will write a program that looks in the current directory for a file named "original.txt". If this file is not present print an error message and quit. If it is present, then read the file, and analyze the words that appear in the file, in order to determine whether the text is likely to be written in German or in English. To clarify: there are a few words that exist within both languages, and there can also be words that are part of a language and yet were not included within the simple German and English dictionary that was provided in the previous homework -- nonetheless, these are exceptional cases. If the text is written in English most of the words should have token numbers that match to keys in the English-to-German dictionary that the last homework created; if written in German, most would have tokens that are keys in the German-to-English dictionary that the last homework created. Note: words need to be turned into lowercase before doing this dictionary-key check.

So you will get a count of how many of the words match to German tokens and how many match to English tokens. In this count, only count unique words (ie, the word "the" is just one word, even if it appears many times in the text). If the count indicates that at least 60% of the words are English, then the text is English. If the count indicates 60% are German, then the text is German. If neither of these are true then ask the user to tell you whether the original text is English or German, and use the user's answer.

Next, your job is to translate the text sentence by sentence. This means that you have to read the text and identify the sentences (sentences end in either a ".", a "?", or a "!"). Within each sentence translate the words -- but starting with the longest phrases that can be found to match the dictionary from within that sentence. If multiple phrases of equal length exist in the sentence, then translate among them from left to right. If a word is not found in the dictionary, then leave it as-is. Once the sentence has been translated, restore the punctuation and capitalization that was used in the original text. But, to avoid confusion, only allow capitalization of the first word of any given phrase (including, of course, one word phrases). To clarify: the first word of a sentence will be capitalized, and so will proper place-names such as "Taiwan"; this capitalization will be present in both German and English, so you look at the first letter of that phrase in the original text to determine whether the translated text for that phrase needs to make its first letter be capitalized.

The paragraphs in the original text will be separated by blank lines. This property must also be preserved in your translation. Therefore after having translated all of the sentences within an identified paragraph of the original text, you will then output the translated text with a blank line at the end. (The final paragraph of the document is an exception, of course: no blank line goes after it.) when outputting the individual paragraphs, use a 78-column text line in DOS format (meaning each line ends with a "\r\n"). Use the "textwrap" module to prevent words from getting chopped between lines in this 78 column format.

The name of your output file will be "translated.txt".

After this output file has been completed, you will then repeat the translation procedure, but backwards. This time: 1) You don't need to figure out the original language - it is the opposite of whatever you used before, 2) You read your input from "translated.txt" rather than from "original.txt", 3) Your new output file will be "translated_back.txt".


